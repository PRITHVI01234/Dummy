import asyncio
import websockets
import json
from datetime import datetime
import tkinter as tk
from tkinter import ttk
from fastapi import FastAPI
import threading
import requests
import uvicorn

# Global variable to trigger fault resolve
triggerfaultResolve = False

# FastAPI app initialization
app = FastAPI()

# Function to be called when the send button is pressed
def on_send_button_click():
    global triggerfaultResolve
    triggerfaultResolve = True
    print("trigger", triggerfaultResolve)

async def faultResolve(websocket, fault_type, fault_object, trip_relay, source):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]  # Accurate up to milliseconds
    
    fault_info = {
        "requestType": "ResolveFault",
        "Timestamp": timestamp,
        "FaultType": fault_type,
        "FaultObject": fault_object,
        "TripRelay": trip_relay,
        "Source": source
    }
    
    await websocket.send(json.dumps(fault_info))
    print("\nDEBUG: Sent fault info:", json.dumps(fault_info))

async def unstabilityResolve(websocket, unstable_type, balanceGrid, source):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]  # Accurate up to milliseconds
    
    unstability_info = {
        "requestType": "StabilizeGrid",
        "timestamp": timestamp,
        "balanceGrid": balanceGrid,
        "unstabilityCause": unstable_type,
        "source": source
    }
    
    await websocket.send(json.dumps(unstability_info))
    print("\nDEBUG: Sent unstability info:", json.dumps(unstability_info))

async def data_server(websocket, path):
    global triggerfaultResolve
    
    async for message in websocket:
        try:
            data = json.loads(message)
            request_type = data.get("requestType")
            print(data)
            if request_type == "Value":
                bus_id = data.get("BusID")
                bus_data = data.get("BusData")
                source = data.get("Source")
                timestamp = data.get("timestamp")

                print(f"\nReceived Value Message:\n"
                      f"BusID: {bus_id}\n"
                      f"Source: {source}\n"
                      f"Timestamp: {timestamp}\n"
                      f"Bus Data:\n{bus_data}\n")
                
                # Forward the received data to the FastAPI endpoint
                requests.post("http://localhost:8000/receive_data", json=data)

            else:
                print(f"DEBUG: Unhandled requestType: {request_type}")

            # Check if triggerfaultResolve is True
            if triggerfaultResolve:
                triggerfaultResolve = False  # Reset the trigger
                print("Enter", triggerfaultResolve)
                await faultResolve(websocket, selected_fault_type.get(), "Bus5", True, "S-ZMA")

        except json.JSONDecodeError as e:
            print(f"ERROR: Failed to decode JSON message: {e}")
        except Exception as e:
            print(f"ERROR: An unexpected error occurred: {e}")

async def main():
    start_server = websockets.serve(data_server, '0.0.0.0', 8764)
    await start_server
    await asyncio.Future()  # This will keep the server running

# FastAPI route to receive data
@app.post("/receive_data")
async def receive_data(data: dict):
    print("Received data in FastAPI:", data)
    return {"status": "success", "received_data": data}

# Setting up the UI
def setup_ui():
    root = tk.Tk()
    root.title("Fault Trigger UI")

    # Dropdown for fault type
    ttk.Label(root, text="Select Fault Type:").pack(pady=10)
    global selected_fault_type
    selected_fault_type = tk.StringVar()
    fault_type_dropdown = ttk.Combobox(root, textvariable=selected_fault_type)
    fault_type_dropdown['values'] = ("Under-Voltage", "Over-Voltage", "Under-Frequency", "Over-Frequency", "Reactive Power Unstable", "Under-Load", "Over-Load")
    fault_type_dropdown.current(1)  # Default to "Over-Voltage"
    fault_type_dropdown.pack(pady=10)

    # Send button
    send_button = ttk.Button(root, text="Send", command=on_send_button_click)
    send_button.pack(pady=20)

    # Start the Tkinter event loop
    root.mainloop()

if __name__ == "__main__":
    # Run the UI in a separate thread
    ui_thread = threading.Thread(target=setup_ui)
    ui_thread.start()

    # Start the FastAPI server in a separate thread
    api_thread = threading.Thread(target=lambda: uvicorn.run(app, host="0.0.0.0", port=8000))
    api_thread.start()

    # Run the websocket server in the main thread
    asyncio.run(main())
